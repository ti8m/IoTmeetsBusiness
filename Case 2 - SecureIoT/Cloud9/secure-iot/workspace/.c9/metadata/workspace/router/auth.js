{"changed":true,"filter":false,"title":"auth.js","tooltip":"/router/auth.js","value":"\nvar express = require('express');\nvar Device  = require('../models/device');\nvar jwt     = require('jsonwebtoken'); \nvar crypto  = require('crypto');\nvar ecdh    = require('../node_modules/ecdh/index');\nvar random  = require(\"randomstring\");\nvar mqtt    = require('mqtt');\n\n// Set curve-type\nvar curve = ecdh.getCurve('secp192r1');\n\n// Set hash algorithm\nvar algorithm = 'sha1';\n\nvar challenge;\n\nmodule.exports = function(app) {\n    \n\n// get an instance of the router for auth routes\nvar authRoutes = express.Router();\n\n// Test Var\nvar INVALID_KEY_SIG = false;\nvar INVALID_CHALLENGE_SIG = false;\nvar INVALID_DEVICE_ID = false;\n\n\n// ==================================\n// Auth Key-Route ===================\n// ==================================\nauthRoutes.post('/key', function(req, res) {\n  \n  // Get request data\n  var deviceId = req.body.deviceId; // String\n  var devicePublicKeyArray = req.body.publicKey; // Array\n  var signature = req.body.signature; // Array\n  \n  // Create signature-buffer (split array in r and s)\n  var length = signature.length;\n  \n  var r = signature.slice(0, length/2);\n  var s = signature.slice(length/2);\n  \n  var signatureBuffer = serializeSig(r, s);\n  \n  // Create buffer from device-id\n  var devicIdBuffer = new Buffer(deviceId);\n  \n  // Create device public-key\n  var devicePublicBuffer = new Buffer(devicePublicKeyArray);\n  var devicePublicKey = ecdh.PublicKey.fromBuffer(curve, devicePublicBuffer);\n  \n  // Create data-buffer to hash\n  var bufLength = devicePublicBuffer.length + devicIdBuffer.length;\n  var dataBuffer = Buffer.concat([devicePublicBuffer, devicIdBuffer], bufLength);\n  \n  // Hash device public-key & device-id (data)\n  var dataHash = crypto.createHash(algorithm).update(dataBuffer).digest();\n  \n  // validate signature with the data-hash and device public-key\n  var isValid = devicePublicKey.verifySignature(dataHash, signatureBuffer);\n  console.log('Key-Signature is', isValid ? 'valid' : 'invalid');\n  \n  if (isValid && !INVALID_KEY_SIG) {\n        \n        // Save device\n        saveDevice(deviceId, devicePublicKeyArray );\n        \n        // Start MQTT-Client for validation by user\n        \n        // Setup mqtt-connection\n        var id = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\n        var broker = app.get('mqtt-broker');\n        var options = app.get('mqtt-options');\n        options.clientId = id;\n  \n        // Connect to mqtt-broker\n        var client = mqtt.connect(broker, options);\n  \n        client.on('connect', function () {\n        console.log(\"MQTT connected\");\n    \n        // Subscribe to auth-messages from moblie-app\n        client.subscribe('secureIoT/mobile/'+ deviceId);\n    \n        // Publish validation-message to mobile-app\n        client.publish('secureIoT/server/' + deviceId, 'AUTH_VALIDATE');\n\n        });\n\n        client.on('message', function (topic, message) {\n          \n          var msg = message.toString();\n          console.log(\"mqtt-message received: \" + msg);\n    \n          if(msg === \"AUTH_CONFIRM\"){\n            \n            // Publish message to device\n            client.publish('secureIoT/server/' + deviceId, 'AUTH_ACCEPTED');\n    \n            client.end();\n          }\n    \n          if(msg === \"AUTH_REJECT\"){\n            \n            client.end();\n          }\n    \n      });\n      \n      return res.status(202).send({\n        success: true,\n        message: 'Signature verified. Waiting for validation by user...'});\n        \n    } else {\n        \n        return res.status(401).send({\n          success: false,\n          message: 'Signature not valid'});\n        \n      }\n\n});\n\n\n// ==================================\n// Auth-Signing Route ===============\n// ==================================\nauthRoutes.post('/sign', function(req, res) {\n  \n  console.log(\"POST on auth/sign\");\n  \n  // Get request data\n  var deviceId = req.body.deviceId; // String\n  \n  // Check if device exist\n  Device.findOne({deviceId: deviceId}, function(err, device) {\n    if (err) throw err;\n          \n    if(device && !INVALID_DEVICE_ID) {\n      \n      // Get root private-key\n      var keyBuffer = new Buffer(app.get('root-private-key'), \"hex\");\n      var rootPrivateKey = ecdh.PrivateKey.fromBuffer(curve, keyBuffer);\n      \n      // Create buffer from device-id\n      var devicIdBuffer = new Buffer(deviceId);\n      \n      // Create buffer from device public-key\n      var devicePublicBuffer = new Buffer(device.publicKey);\n      \n      // Create data-buffer to hash\n      var bufLength = devicePublicBuffer.length + devicIdBuffer.length;\n      var dataBuffer = Buffer.concat([devicePublicBuffer, devicIdBuffer], bufLength);\n      \n      // Hash device public-key & device-id (data)\n      var dataHash = crypto.createHash(algorithm).update(dataBuffer).digest();\n      \n      // Sign hashed public-key & device-id with the root private-key\n      var signature = rootPrivateKey.sign(dataHash, algorithm);\n      \n      // Create array from signature\n      var signatureBuffer = deserializeSig(signature);\n      var uint8Array = new Uint8Array(signatureBuffer);\n      var signatureArray = [].slice.call(uint8Array);\n      console.log(\"Signature: \" + signatureArray);\n      \n      // Create challenge\n      challenge = random.generate(20);\n      \n      // response including signature and challenge\n      return res.status(201).send({\n        success: true,\n        message: 'verify the signature with the root public-key and sign the challange with the device private-key',\n        signature: signatureArray,\n        challenge: challenge\n      });\n      \n            \n    } else {\n      \n      console.log(\"Device not found\");\n            \n      return res.status(404).send({\n        success: false,\n        message: 'Device not found'\n      });\n            \n    }\n          \n  });\n  \n});\n\n\n// ==================================\n// Auth Challenge-Route =============\n// ==================================\nauthRoutes.post('/challenge', function(req, res) {\n  \n  // Get request data\n  var deviceId = req.body.deviceId; // String\n  var signature = req.body.signature; // Array\n  \n  Device.findOne({deviceId: deviceId}, function(err, device) {\n    if (err) throw err;\n          \n    if(device && !INVALID_DEVICE_ID) {\n      \n      // Create signature-buffer (split array in r and s)\n      var length = signature.length;\n      \n      var r = signature.slice(0, length/2);\n      var s = signature.slice(length/2);\n      \n      var signatureBuffer = serializeSig(r, s);\n      \n      // Get device public-key\n      var keyBuffer = new Buffer(device.publicKey);\n      var publicKey = ecdh.PublicKey.fromBuffer(curve, keyBuffer);\n      \n      // Create challange-buffer\n      var challengeBuffer = new Buffer(challenge);\n      \n      // validate the signature with challenge and device public-key\n      var isValid = publicKey.verifySignature(challengeBuffer, signatureBuffer);\n      console.log('Challenge-Signature is', isValid ? 'valid' : 'invalid');\n      \n      if (isValid && ! INVALID_CHALLENGE_SIG) {\n    \n        // create token\n        var token = jwt.sign({c: challenge}, app.get('token-secret'), {\n          \n          // expiresIn: 30 // 10s\n          // expiresIn: \"24h\"   \n          expiresIn: \"30 days\"\n          \n        });\n        \n        console.log(\"Token: \" + token);\n\n        // response including token\n        return res.status(201).send({\n          success: true,\n          message: 'use this token for service requests',\n          token: token\n        });\n        \n        \n      } else {\n        \n        return res.status(401).send({\n          success: false,\n          message: 'Authentication failed' });\n      }\n      \n    \n    } else {\n      \n        console.log(\"Device not found\");\n            \n        return res.status(404).send({\n          success: false,\n          message: 'Device not found'\n        });\n            \n      }\n          \n  });\n    \n});\n\n\n// apply the routes to app with the prefix /service\napp.use('/auth', authRoutes);\n\n};\n\n\n/**\n *  Creates a signature-buffer in DER-format\n *  @param {Array} r (r-values from signature)\n *  @param {Array} s (s-values from signature)\n *  @return {Buffer} buf (signature-buffer in DER-format)\n */\nvar serializeSig = function(r, s) {\n    \n    var DER_SEQUENCE = 0x30;\n    var DER_INTEGER = 0x02;\n    \n    var rBa = new Buffer(r);\n    var sBa = new Buffer(s);\n\n    var buf = new Buffer(6 + rBa.length + sBa.length),\n        end = buf.length - sBa.length;\n\n    buf[0] = DER_SEQUENCE;\n    buf[1] = buf.length - 2;\n\n    buf[2] = DER_INTEGER;\n    buf[3] = rBa.length;\n    rBa.copy(buf, 4);\n\n    buf[end-2] = DER_INTEGER;\n    buf[end-1] = sBa.length;\n    sBa.copy(buf, end);\n\n    return buf;\n};\n\n\n/**\n *  Create buffer with raw signature\n *  @param {Buffer} buf (signature-buffer in DER-format)\n *  @return {Buffer} buf (buffer with raw signature)\n */\nfunction deserializeSig(buf) {\n  \n  var DER_SEQUENCE = 0x30;\n    var DER_INTEGER = 0x02;\n    \n    if(buf[0] !== DER_SEQUENCE)\n        throw new Error(\"Signature is not a valid DERSequence\");\n\n    if(buf[1] > buf.length-2)\n        throw new Error(\"Signature length is too short\");\n\n    if(buf[2] !== DER_INTEGER)\n        throw new Error(\"First element in signature must be a DERInteger\");\n\n    var pos = 4,\n        rBa = buf.slice(pos, pos+buf[3]);\n\n    pos += rBa.length;\n    if(buf[pos++] !== DER_INTEGER)\n        throw new Error(\"Second element in signature must be a DERInteger\");\n\n    var sBa = buf.slice(pos+1, pos+1+buf[pos]);\n\n    var length = rBa.length + sBa.length;\n    return Buffer.concat([rBa, sBa], length);\n\n}\n\n\n/**\n *  Save a new device instance (or update if already exist)\n *  @param {String} deviceId\n *  @return {Array} publicKey\n */\nvar saveDevice = function(deviceId, publicKey){\n  \n  // check if device already exist\n  Device.findOne({deviceId: deviceId}, function(err, device) {\n    \n    if (err) throw err;\n          \n    if(device) {\n      console.log(\"Update existing device\");\n            \n      device.publicKey = publicKey;\n            \n      device.save(function(err) {\n        if (err) throw err;\n            console.log('Device updated successfully');\n        });\n            \n    } else {\n        console.log(\"Create new device\");\n            \n        var newDevice = new Device({\n          deviceId: deviceId,\n          publicKey: publicKey\n        });\n            \n        newDevice.save(function(err) {\n          if (err) throw err;\n          console.log('Device saved successfully');\n        });\n            \n     }\n          \n  });      \n  \n};","undoManager":{"mark":91,"position":100,"stack":[[{"start":{"row":350,"column":16},"end":{"row":350,"column":17},"action":"insert","lines":["a"],"id":7232}],[{"start":{"row":350,"column":17},"end":{"row":350,"column":18},"action":"insert","lines":["y"],"id":7233}],[{"start":{"row":350,"column":50},"end":{"row":350,"column":51},"action":"remove","lines":[")"],"id":7234}],[{"start":{"row":350,"column":49},"end":{"row":350,"column":50},"action":"remove","lines":["e"],"id":7235}],[{"start":{"row":350,"column":48},"end":{"row":350,"column":49},"action":"remove","lines":["r"],"id":7236}],[{"start":{"row":350,"column":47},"end":{"row":350,"column":48},"action":"remove","lines":["u"],"id":7237}],[{"start":{"row":350,"column":46},"end":{"row":350,"column":47},"action":"remove","lines":["t"],"id":7238}],[{"start":{"row":350,"column":45},"end":{"row":350,"column":46},"action":"remove","lines":["a"],"id":7239}],[{"start":{"row":350,"column":44},"end":{"row":350,"column":45},"action":"remove","lines":["n"],"id":7240}],[{"start":{"row":350,"column":43},"end":{"row":350,"column":44},"action":"remove","lines":["g"],"id":7241}],[{"start":{"row":350,"column":42},"end":{"row":350,"column":43},"action":"remove","lines":["i"],"id":7242}],[{"start":{"row":350,"column":41},"end":{"row":350,"column":42},"action":"remove","lines":["s"],"id":7243}],[{"start":{"row":350,"column":40},"end":{"row":350,"column":41},"action":"remove","lines":[" "],"id":7244}],[{"start":{"row":350,"column":39},"end":{"row":350,"column":40},"action":"remove","lines":["w"],"id":7245}],[{"start":{"row":350,"column":38},"end":{"row":350,"column":39},"action":"remove","lines":["a"],"id":7246}],[{"start":{"row":350,"column":37},"end":{"row":350,"column":38},"action":"remove","lines":["r"],"id":7247}],[{"start":{"row":350,"column":36},"end":{"row":350,"column":37},"action":"remove","lines":[" "],"id":7248}],[{"start":{"row":350,"column":35},"end":{"row":350,"column":36},"action":"remove","lines":["h"],"id":7249}],[{"start":{"row":350,"column":34},"end":{"row":350,"column":35},"action":"remove","lines":["t"],"id":7250}],[{"start":{"row":350,"column":33},"end":{"row":350,"column":34},"action":"remove","lines":["i"],"id":7251}],[{"start":{"row":350,"column":32},"end":{"row":350,"column":33},"action":"remove","lines":["w"],"id":7252}],[{"start":{"row":350,"column":31},"end":{"row":350,"column":32},"action":"remove","lines":[" "],"id":7253}],[{"start":{"row":350,"column":30},"end":{"row":350,"column":31},"action":"remove","lines":["r"],"id":7254}],[{"start":{"row":350,"column":29},"end":{"row":350,"column":30},"action":"remove","lines":["e"],"id":7255}],[{"start":{"row":350,"column":28},"end":{"row":350,"column":29},"action":"remove","lines":["f"],"id":7256}],[{"start":{"row":350,"column":27},"end":{"row":350,"column":28},"action":"remove","lines":["f"],"id":7257}],[{"start":{"row":350,"column":26},"end":{"row":350,"column":27},"action":"remove","lines":["u"],"id":7258}],[{"start":{"row":350,"column":25},"end":{"row":350,"column":26},"action":"remove","lines":["b"],"id":7259}],[{"start":{"row":350,"column":24},"end":{"row":350,"column":25},"action":"remove","lines":["("],"id":7260}],[{"start":{"row":350,"column":23},"end":{"row":350,"column":24},"action":"remove","lines":[" "],"id":7261}],[{"start":{"row":350,"column":22},"end":{"row":350,"column":23},"action":"remove","lines":["f"],"id":7262}],[{"start":{"row":350,"column":21},"end":{"row":350,"column":22},"action":"remove","lines":["u"],"id":7263}],[{"start":{"row":350,"column":20},"end":{"row":350,"column":21},"action":"remove","lines":["b"],"id":7264}],[{"start":{"row":350,"column":20},"end":{"row":350,"column":21},"action":"insert","lines":["p"],"id":7265}],[{"start":{"row":350,"column":21},"end":{"row":350,"column":22},"action":"insert","lines":["u"],"id":7266}],[{"start":{"row":350,"column":22},"end":{"row":350,"column":23},"action":"insert","lines":["b"],"id":7267}],[{"start":{"row":350,"column":23},"end":{"row":350,"column":24},"action":"insert","lines":["l"],"id":7268}],[{"start":{"row":350,"column":24},"end":{"row":350,"column":25},"action":"insert","lines":["i"],"id":7269}],[{"start":{"row":350,"column":25},"end":{"row":350,"column":26},"action":"insert","lines":["c"],"id":7270}],[{"start":{"row":350,"column":26},"end":{"row":350,"column":27},"action":"insert","lines":["k"],"id":7271}],[{"start":{"row":350,"column":26},"end":{"row":350,"column":27},"action":"remove","lines":["k"],"id":7272}],[{"start":{"row":350,"column":26},"end":{"row":350,"column":27},"action":"insert","lines":["K"],"id":7273}],[{"start":{"row":350,"column":27},"end":{"row":350,"column":28},"action":"insert","lines":["e"],"id":7274}],[{"start":{"row":350,"column":28},"end":{"row":350,"column":29},"action":"insert","lines":["y"],"id":7275}],[{"start":{"row":386,"column":0},"end":{"row":386,"column":2},"action":"remove","lines":["  "],"id":7276}],[{"start":{"row":385,"column":2},"end":{"row":386,"column":0},"action":"remove","lines":["",""],"id":7277}],[{"start":{"row":346,"column":0},"end":{"row":347,"column":0},"action":"insert","lines":["",""],"id":7278}],[{"start":{"row":195,"column":0},"end":{"row":196,"column":0},"action":"remove","lines":["",""],"id":7279}],[{"start":{"row":24,"column":26},"end":{"row":24,"column":27},"action":"remove","lines":["e"],"id":7280}],[{"start":{"row":24,"column":25},"end":{"row":24,"column":26},"action":"remove","lines":["s"],"id":7281}],[{"start":{"row":24,"column":24},"end":{"row":24,"column":25},"action":"remove","lines":["l"],"id":7282}],[{"start":{"row":24,"column":23},"end":{"row":24,"column":24},"action":"remove","lines":["a"],"id":7283}],[{"start":{"row":24,"column":22},"end":{"row":24,"column":23},"action":"remove","lines":["f"],"id":7284}],[{"start":{"row":24,"column":22},"end":{"row":24,"column":23},"action":"insert","lines":["t"],"id":7285}],[{"start":{"row":24,"column":23},"end":{"row":24,"column":24},"action":"insert","lines":["r"],"id":7286}],[{"start":{"row":24,"column":24},"end":{"row":24,"column":25},"action":"insert","lines":["u"],"id":7287}],[{"start":{"row":24,"column":25},"end":{"row":24,"column":26},"action":"insert","lines":["e"],"id":7288}],[{"start":{"row":24,"column":25},"end":{"row":24,"column":26},"action":"remove","lines":["e"],"id":7289}],[{"start":{"row":24,"column":24},"end":{"row":24,"column":25},"action":"remove","lines":["u"],"id":7290}],[{"start":{"row":24,"column":23},"end":{"row":24,"column":24},"action":"remove","lines":["r"],"id":7291}],[{"start":{"row":24,"column":22},"end":{"row":24,"column":23},"action":"remove","lines":["t"],"id":7292}],[{"start":{"row":24,"column":22},"end":{"row":24,"column":23},"action":"insert","lines":["f"],"id":7293}],[{"start":{"row":24,"column":23},"end":{"row":24,"column":24},"action":"insert","lines":["a"],"id":7294}],[{"start":{"row":24,"column":24},"end":{"row":24,"column":25},"action":"insert","lines":["l"],"id":7295}],[{"start":{"row":24,"column":22},"end":{"row":24,"column":25},"action":"remove","lines":["fal"],"id":7296},{"start":{"row":24,"column":22},"end":{"row":24,"column":27},"action":"insert","lines":["false"]}],[{"start":{"row":26,"column":28},"end":{"row":26,"column":29},"action":"remove","lines":["e"],"id":7297}],[{"start":{"row":26,"column":27},"end":{"row":26,"column":28},"action":"remove","lines":["s"],"id":7298}],[{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"remove","lines":["l"],"id":7299}],[{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"remove","lines":["a"],"id":7300}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"remove","lines":["f"],"id":7301}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"insert","lines":["t"],"id":7302}],[{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"insert","lines":["r"],"id":7303}],[{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"insert","lines":["u"],"id":7304}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":27},"action":"remove","lines":["tru"],"id":7305},{"start":{"row":26,"column":24},"end":{"row":26,"column":28},"action":"insert","lines":["true"]}],[{"start":{"row":26,"column":27},"end":{"row":26,"column":28},"action":"remove","lines":["e"],"id":7306}],[{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"remove","lines":["u"],"id":7307}],[{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"remove","lines":["r"],"id":7308}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"remove","lines":["t"],"id":7309}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"insert","lines":["f"],"id":7310}],[{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"insert","lines":["a"],"id":7311}],[{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"insert","lines":["l"],"id":7312}],[{"start":{"row":26,"column":27},"end":{"row":26,"column":28},"action":"insert","lines":["s"],"id":7313}],[{"start":{"row":26,"column":24},"end":{"row":26,"column":28},"action":"remove","lines":["fals"],"id":7314},{"start":{"row":26,"column":24},"end":{"row":26,"column":29},"action":"insert","lines":["false"]}],[{"start":{"row":25,"column":32},"end":{"row":25,"column":33},"action":"remove","lines":["e"],"id":7315}],[{"start":{"row":25,"column":31},"end":{"row":25,"column":32},"action":"remove","lines":["s"],"id":7316}],[{"start":{"row":25,"column":30},"end":{"row":25,"column":31},"action":"remove","lines":["l"],"id":7317}],[{"start":{"row":25,"column":29},"end":{"row":25,"column":30},"action":"remove","lines":["a"],"id":7318}],[{"start":{"row":25,"column":28},"end":{"row":25,"column":29},"action":"remove","lines":["f"],"id":7319}],[{"start":{"row":25,"column":28},"end":{"row":25,"column":29},"action":"insert","lines":["t"],"id":7320}],[{"start":{"row":25,"column":29},"end":{"row":25,"column":30},"action":"insert","lines":["r"],"id":7321}],[{"start":{"row":25,"column":30},"end":{"row":25,"column":31},"action":"insert","lines":["u"],"id":7322}],[{"start":{"row":25,"column":31},"end":{"row":25,"column":32},"action":"insert","lines":["e"],"id":7323}],[{"start":{"row":25,"column":31},"end":{"row":25,"column":32},"action":"remove","lines":["e"],"id":7324}],[{"start":{"row":25,"column":30},"end":{"row":25,"column":31},"action":"remove","lines":["u"],"id":7325}],[{"start":{"row":25,"column":29},"end":{"row":25,"column":30},"action":"remove","lines":["r"],"id":7326}],[{"start":{"row":25,"column":28},"end":{"row":25,"column":29},"action":"remove","lines":["t"],"id":7327}],[{"start":{"row":25,"column":28},"end":{"row":25,"column":29},"action":"insert","lines":["f"],"id":7328}],[{"start":{"row":25,"column":29},"end":{"row":25,"column":30},"action":"insert","lines":["a"],"id":7329}],[{"start":{"row":25,"column":30},"end":{"row":25,"column":31},"action":"insert","lines":["l"],"id":7330}],[{"start":{"row":25,"column":31},"end":{"row":25,"column":32},"action":"insert","lines":["s"],"id":7331}],[{"start":{"row":25,"column":32},"end":{"row":25,"column":33},"action":"insert","lines":["e"],"id":7332}]]},"ace":{"folds":[],"scrolltop":180,"scrollleft":0,"selection":{"start":{"row":26,"column":30},"end":{"row":26,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1464957108628}